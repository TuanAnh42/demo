export function showLoginForm() {
    loadOverlayForm("login", "frontend/login.html", "loginContact", setupLoginHandler);
}

export function showRegisterForm() {
    loadOverlayForm("register", "frontend/register.html", "registerContact", setupRegisterHandler);
}

function loadOverlayForm(type, path, formId, setupCallback) {
    let overlay = document.getElementById("loginOverlay");

    // N·∫øu overlay ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
    if (!overlay) {
        overlay = document.createElement("div");
        overlay.id = "loginOverlay";
        overlay.style.position = "fixed";
        overlay.style.top = "0";
        overlay.style.left = "0";
        overlay.style.width = "100vw";
        overlay.style.height = "100vh";
        overlay.style.background = "rgba(0,0,0,0.5)";
        overlay.style.display = "flex";
        overlay.style.alignItems = "center";
        overlay.style.justifyContent = "center";
        overlay.style.zIndex = "9999";
        document.body.appendChild(overlay);
    }




    // Lu√¥n t·∫£i l·∫°i n·ªôi dung m·ªõi (d√π overlay ƒë√£ hi·ªÉn th·ªã)
    fetch(path)
        .then(res => res.text())
        .then(html => {
            overlay.innerHTML = `
                <div id="${type}Form">${html}</div>
            `;

            setupCallback();

            overlay.style.display = "flex";

            // Click ngo√†i form th√¨ ƒë√≥ng
            overlay.onclick = function (e) {
                const popup = overlay.querySelector("form")?.closest("div");
                if (!popup || !popup.contains(e.target)) {
                    overlay.style.display = "none";
                }
            };

        })
        .catch(err => console.error(`‚ùå L·ªói khi t·∫£i ${type}:`, err));
}
// ƒê·∫∑t ƒëo·∫°n n√†y trong file JS load ƒë·∫ßu trang
const params = new URLSearchParams(window.location.search);
const token = params.get('token');
if (token) {
    localStorage.setItem('token', token);
    window.history.replaceState({}, document.title, window.location.pathname);
    updateMenuAfterLogin();
    console.log('Token JWT ƒë√£ l∆∞u localStorage');
}


function setupLoginHandler() {
    document.getElementById("loginContact").addEventListener("submit", async function (e) {
        e.preventDefault();
        const email = document.getElementById("email").value.trim();
        const password = document.getElementById("password").value.trim();

        const res = await fetch("https://up5sure.com/wp-json/jwt-auth/v1/token", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username: email, password })  // ch√∫ √Ω ƒë·ªïi email th√†nh username
        });

        const data = await res.json();
        if (res.ok && data.token) {
            alert("‚úÖ Login Success!");
            localStorage.setItem("token", data.token);
            const userRole = data.user_role || "subscriber";
            const usernameDisplay = data.user_display_name || data.user_nicename || email;

            localStorage.setItem("user", JSON.stringify({
                name: usernameDisplay,
                email: data.user_email || email,
                role: userRole
                // L∆∞u role n·∫øu c·∫ßn

            }));
             await loginAndRedirect(email, password);
            console.log(data);
            document.getElementById("loginOverlay").style.display = "none";
            updateMenuAfterLogin(usernameDisplay); // C·∫≠p nh·∫≠t menu sau khi ƒëƒÉng nh·∫≠p

        } else {
            alert("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: " + (data.message || "ƒê√£ x·∫£y ra l·ªói"));
        }
    });
}


function setupRegisterHandler() {
    document.getElementById("registerContact").addEventListener("submit", async function (e) {
        e.preventDefault();
        const name = document.getElementById("username").value.trim();
        const email = document.getElementById("email").value.trim();
        const password = document.getElementById("password").value.trim();
        const confirmPassword = document.getElementById("confirm_password").value.trim();
        // console.log('name:', name);
        if (password !== confirmPassword) {
            alert("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp");
            return;
        }


        const res = await fetch("https://up5sure.com/wp-json/custom/v1/register", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                username: name,
                email,
                password,
                password_confirmation: confirmPassword
            })
        });

        const data = await res.json();
        if (res.ok) {
            alert("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông...");
            // Sau khi ƒëƒÉng k√Ω th√†nh c√¥ng, g·ªçi ti·∫øp login ƒë·ªÉ l·∫•y token
            loginAfterRegister(name, password);
        } else {
            alert("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i: " + (data.message || "ƒê√£ x·∫£y ra l·ªói"));
        }
    });
}

async function loginAfterRegister(username, password) {
    const res = await fetch("https://up5sure.com/wp-json/jwt-auth/v1/token", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
    });
    const data = await res.json();
    if (res.ok && data.token) {
        const usernameDisplay = data.user_display_name || data.user_nicename || username;

        localStorage.setItem("token", data.token);
        localStorage.setItem("user", JSON.stringify({
            name: usernameDisplay,
            email: data.user_email || username
        }));

        document.getElementById("loginOverlay").style.display = "none";
        updateMenuAfterLogin(usernameDisplay); // C·∫≠p nh·∫≠t menu sau khi ƒëƒÉng k√Ω
    } else {
        alert("‚ùå ƒêƒÉng nh·∫≠p sau khi ƒëƒÉng k√Ω th·∫•t b·∫°i.");
    }
}

async function loginAndRedirect(username, password) {
    // 1. G·ªçi l·∫•y token JWT (b·∫°n ƒë√£ c√≥ ƒëo·∫°n n√†y r·ªìi)
    const tokenRes = await fetch("https://up5sure.com/wp-json/jwt-auth/v1/token", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
    });

    const tokenData = await tokenRes.json();

    if (!tokenRes.ok || !tokenData.token) {
        alert("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: " + (tokenData.message || "L·ªói"));
        return;
    }

    localStorage.setItem("token", tokenData.token);

    // 2. G·ªçi API t·∫°o session login WordPress (cookie)
    const sessionRes = await fetch("https://up5sure.com/wp-json/custom/v1/login-session", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include", // b·∫Øt bu·ªôc ƒë·ªÉ g·ª≠i cookie
        body: JSON.stringify({ username, password })
    });

    if (!sessionRes.ok) {
        alert("Kh√¥ng th·ªÉ t·∫°o session ƒëƒÉng nh·∫≠p WP");
        return;
    }

    // 3. Redirect sang WP admin
    window.location.href = "https://up5sure.com/wp-admin";
}

export function updateMenuAfterLogin(username) {
    const menu = document.getElementById("accountDropdown");
    if (!menu) return;

    menu.innerHTML = `
        <div class="dropdown-account-menu">
            <button class="dropdown-toggle-account" id="userMenuBtn">
                ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, <strong>${username}</strong> ‚ñº
            </button>
            <div class="dropdown-menu-account" id="userMenuList">
                <a href="profile.html">üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</a>
                <a href="post-form.html">üìù ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</a>
                <a href="#" id="logoutMenu">üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</a>
            </div>
        </div>
    `;

    // Toggle hi·ªÉn th·ªã menu khi b·∫•m
    const btn = document.getElementById("userMenuBtn");
    const list = document.getElementById("userMenuList");
    btn.addEventListener("click", (e) => {
        e.stopPropagation();
        list.classList.toggle("show");
    });

    // ·∫®n menu khi click ra ngo√†i
    document.addEventListener("click", () => {
        list.classList.remove("show");
    });

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
    document.getElementById("logoutMenu").addEventListener("click", (e) => {
        e.preventDefault();
        logoutUser();
    });
}
async function handleGoogleLogin(googleToken) {
    // G·ª≠i token Google l√™n backend WP l·∫•y JWT token c·ªßa b·∫°n
    const res = await fetch("https://up5sure.com/wp-json/custom/v1/google-login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token: googleToken })
    });
    const data = await res.json();

    if (res.ok && data.token) {
        localStorage.setItem("token", data.token);

        const usernameDisplay = data.user_display_name || data.user_nicename || "User";

        localStorage.setItem("user", JSON.stringify({
            name: usernameDisplay,
            email: data.user_email || ""
        }));

        document.getElementById("loginOverlay").style.display = "none";
        updateMenuAfterLogin(usernameDisplay);
    } else {
        console.error("Google login failed:", data);
        alert("‚ùå ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");


    }
}

async function fetchUserInfo(token) {
    try {
        const res = await fetch('https://up5sure.com/wp-json/custom/v1/userinfo', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        if (!res.ok) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c user');
        const data = await res.json();
        return data;
    } catch (error) {
        console.error(error);
        return null;
    }
}

async function renderInfo() {
    const tokenObj = localStorage.getItem("token") || '{}';


    if (!tokenObj) {
        console.log("Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c ch∆∞a c√≥ token");
        return;
    }

    const user = await fetchUserInfo(tokenObj);

    if (!user) {
        console.log("L·∫•y th√¥ng tin user th·∫•t b·∫°i");
        return;
    }

    // Hi·ªÉn th·ªã th√¥ng tin user l√™n UI
    const userName = document.getElementById("name");
    const userEmail = document.getElementById("email");
    const userPhone = document.getElementById("phone");
    const userAddress = document.getElementById("address");
    const userNote = document.getElementById("note");

    if (userName) userName.textContent = user.name || "";
    if (userEmail) userEmail.textContent = user.email || "";
    if (userPhone) userPhone.textContent = user.phone || "";
    if (userAddress) userAddress.textContent = user.address || "";
    if (userNote) userNote.textContent = user.note || "";

    // N√∫t s·ª≠a
    document.getElementById('editBtn').addEventListener('click', () => {
        document.getElementById('display-info').style.display = 'none';
        document.getElementById('editForm').style.display = 'block';

        document.getElementById('editName').value = user.name || '';
        document.getElementById('editPhone').value = user.phone || '';
        document.getElementById('editEmail').value = user.email || '';
        document.getElementById('editAddress').value = user.address || '';
        document.getElementById('editNote').value = user.note || '';
    });

    // H·ªßy s·ª≠a
    document.getElementById('cancelBtn').addEventListener('click', () => {
        document.getElementById('editForm').style.display = 'none';
        document.getElementById('display-info').style.display = 'block';
    });

    // L∆∞u th√¥ng tin
    document.getElementById('editForm').addEventListener('submit', async e => {
        e.preventDefault();

        // L·∫•y d·ªØ li·ªáu m·ªõi t·ª´ form
        const updatedUser = {
            name: document.getElementById('editName').value.trim(),
            phone: document.getElementById('editPhone').value.trim(),
            email: document.getElementById('editEmail').value.trim(),
            address: document.getElementById('editAddress').value.trim(),
            note: document.getElementById('editNote').value.trim()
        };

        // G·ª≠i update l√™n server (b·∫°n c·∫ßn t·∫°o API c·∫≠p nh·∫≠t th√¥ng tin user)
        // V√≠ d·ª•:
        // await updateUserInfo(token, updatedUser);

        // T·∫°m th·ªùi c·∫≠p nh·∫≠t local UI
        if (userName) userName.textContent = updatedUser.name || "";
        if (userEmail) userEmail.textContent = updatedUser.email || "";
        if (userPhone) userPhone.textContent = updatedUser.phone || "";
        if (userAddress) userAddress.textContent = updatedUser.address || "";
        if (userNote) userNote.textContent = updatedUser.note || "";

        // ·∫®n form, hi·ªán info
        document.getElementById('editForm').style.display = 'none';
        document.getElementById('display-info').style.display = 'block';
    });
}



document.addEventListener("DOMContentLoaded", () => {
    renderInfo();
   

});

function logoutUser() {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    location.reload(); // T·∫£i l·∫°i trang ƒë·ªÉ c·∫≠p nh·∫≠t menu
    // ho·∫∑c g·ªçi updateMenuBeforeLogin() ƒë·ªÉ ph·ª•c h·ªìi menu ƒëƒÉng nh·∫≠p
}


function closeLoginForm() {
    const overlay = document.getElementById("loginOverlay");
    if (overlay) overlay.style.display = "none";

}

export function closeRegisterForm() {
    closeLoginForm(); // d√πng chung logic
}


// function showLoginForm() {
//   alert("Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p");
// }

// function showRegisterForm() {
//   alert("Hi·ªÉn th·ªã form ƒëƒÉng k√Ω");
// }

document.getElementById('loginBtn').addEventListener('click', (e) => {
  e.preventDefault();
  showLoginForm();
});

document.getElementById('registerBtn').addEventListener('click', (e) => {
  e.preventDefault();
  showRegisterForm();
});
